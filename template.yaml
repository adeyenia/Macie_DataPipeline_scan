# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 

AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Macie Data Pipeline Scan

  SAM Template to create a serverless application that will trigger a Macie
  sensitive data discovery job upon upload of an object to an S3 bucket. The
  application is intended to be integrated into a data ingestion pipeline for 
  a serverless data lake or analytics workflow.  

Parameters:
  StepFunctionName:
    Type: String
    Default: "maciepipelinescanstatemachine"
    Description: "Enter name for Macie Pipeline Scan Step Function."

  BucketNamePrefix:
    Type: String
    Default: ""
    Description: "Enter unique prefix for Amazon S3 buckets."
  
  ApprovalEmailDestination:
    Type: String
    Default: ""
    Description: >
      Enter email address to receive approval requests. Check your email after 
      deployment to approve email delivery for this notification.

  EnableMacie:
    Type: String
    Default: 'no'
    AllowedValues: ["yes", "no"]
    Description: >
      Do you need to enable Amazon Macie [yes/no]?

      If no, this template will assume Amazon Macie is already enabled in your
      account/region as required for this proof of concept to function.

Conditions:
  CreateMacieSession: !Equals [!Ref EnableMacie, 'yes']

Resources:
  # Macie Def
  MacieSession:
    Type: AWS::Macie::Session
    Condition: CreateMacieSession
    Properties:
      Status: "ENABLED"

  # IAM Policies Def
  MacieScanPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 
              - 'macie2:CreateClassificationJob'
              - 'macie2:TagResource'
            Resource: '*'

  MacieStatusPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 
              - 'macie2:ListFindings'
              - 'macie2:ListClassificationJobs'
              - 'macie2:DescribeClassificationJob'
              - 'macie2:GetFindings'
            Resource: '*'

  S3DeleteRawObjectsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 
              - 's3:DeleteObject'
            Resource: 
              - !Join
                - "/*"
                - - !GetAtt datapipelinerawbucket.Arn
                  - ""

  S3DeleteScanStageObjectsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 
              - 's3:DeleteObject'
            Resource: 
              - !Join
                - "/*"
                - - !GetAtt datapipelinescanstagebucket.Arn
                  - ""

  S3DeleteManualReviewObjectsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 
              - 's3:DeleteObject'
            Resource: 
              - !Join
                - "/*"
                - - !GetAtt datapipelinemanualreviewbucket.Arn
                  - ""

  S3TagObjectsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 
              - 's3:PutObjectTagging'
              - 's3:GetObjectTagging'
            Resource: 
              - !Join
                - "/*"
                - - !GetAtt datapipelinescanstagebucket.Arn
                  - ""
              - !GetAtt datapipelinescanstagebucket.Arn
              - !Join
                - "/*"
                - - !GetAtt datapipelinescanneddatabucket.Arn
                  - ""
              - !GetAtt datapipelinescanneddatabucket.Arn
              - !Join
                - "/*"
                - - !GetAtt datapipelinemanualreviewbucket.Arn
                  - ""
              - !GetAtt datapipelinemanualreviewbucket.Arn
  
  S3WriteObjectsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 
              - 's3:PutObject'
            Resource: 
              - !Join
                - "/*"
                - - !GetAtt datapipelinemanualreviewbucket.Arn
                  - ""
              - !GetAtt datapipelinemanualreviewbucket.Arn
              - !Join
                - "/*"
                - - !GetAtt datapipelinescanneddatabucket.Arn
                  - ""
              - !GetAtt datapipelinescanneddatabucket.Arn

  StateMachineSendTaskPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'states:SendTaskSuccess'
              - 'states:SendTaskFailure'
            Resource: !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:\
                stateMachine:${StepFunctionName}"

  # S3 Buckets Def
  datapipelinerawbucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${BucketNamePrefix}-data-pipeline-raw"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 10 
            Status: Enabled

  datapipelinescanstagebucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${BucketNamePrefix}-data-pipeline-scan-stage"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 10 
            Status: Enabled

  datapipelinemanualreviewbucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${BucketNamePrefix}-data-pipeline-manual-review"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 10 
            Status: Enabled

  datapipelinescanneddatabucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${BucketNamePrefix}-data-pipeline-scanned-data"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 10 
            Status: Enabled

  # SNS Topic Def
  SNSApprovalTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: 'Notification Topic for Approval Requests'
      TopicName: ApprovalRequestNotification
      Subscription:
        - Endpoint: !Sub ${ApprovalEmailDestination}
          Protocol: 'email'

  # Lambda Function Defs
  TriggerMacieScan:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/trigger_macie_scan/
      Environment:
        Variables:
          rawS3Bucket: !Ref datapipelinerawbucket
          scanS3Bucket: !Ref datapipelinescanstagebucket
          accountId: !Ref "AWS::AccountId"
      Handler: triggerMacieScan.lambda_handler
      Policies:
        - !Ref MacieScanPolicy
        - !Ref S3DeleteRawObjectsPolicy
        - !Ref S3TagObjectsPolicy
        - S3ReadPolicy:
            BucketName:
              !Ref datapipelinerawbucket
        - S3WritePolicy:
            BucketName:
              !Ref datapipelinescanstagebucket
      Runtime: python3.6
      Timeout: 10

  CheckMacieStatus:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: functions/check_macie_status/
      Handler: checkMacieStatus.lambda_handler
      Policies:
        - !Ref MacieStatusPolicy
      Runtime: python3.9
      Timeout: 10

  DeleteManualReviewS3Files:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/delete_manual_review_s3_files/
      Environment:
        Variables:
          sourceS3Bucket: !Ref datapipelinemanualreviewbucket
      Handler: deleteManualReviewS3Files.lambda_handler
      Policies:
        - !Ref S3DeleteManualReviewObjectsPolicy
      Runtime: python3.6
      Timeout: 10

  GetMacieFindingsCount:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/get_macie_findings_count/
      Handler: getMacieFindingsCount.lambda_handler
      Policies:
        - !Ref MacieStatusPolicy
        - S3ReadPolicy:
            BucketName:
              !Ref datapipelinescanstagebucket
        - S3WritePolicy:
            BucketName:
              !Ref datapipelinescanneddatabucket
        - S3WritePolicy:
            BucketName:
              !Ref datapipelinemanualreviewbucket
      Runtime: python3.6
      Timeout: 10

  MoveAllScanStageS3Files:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/move_all_scan_stage_s3_files/
      Environment:
        Variables:
          sourceS3Bucket: !Ref datapipelinescanstagebucket
          targetS3Bucket: !Ref datapipelinescanneddatabucket
      Handler: moveAllScanStageS3Files.lambda_handler
      Policies:
        - S3ReadPolicy:
            BucketName:
              !Ref datapipelinescanstagebucket
        - S3WritePolicy:
            BucketName:
              !Ref datapipelinescanneddatabucket
        - !Ref S3DeleteScanStageObjectsPolicy
        - !Ref S3TagObjectsPolicy
        - !Ref S3WriteObjectsPolicy
      Runtime: python3.6
      Timeout: 10

  MoveToScannedDataS3Files:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/move_to_scanned_data_s3_files/
      Environment:
        Variables:
          sourceS3Bucket: !Ref datapipelinemanualreviewbucket
          targetS3Bucket: !Ref datapipelinescanneddatabucket
      Handler: moveToScannedDataS3Files.lambda_handler
      Policies:
        - S3ReadPolicy:
            BucketName:
              !Ref datapipelinemanualreviewbucket
        - !Ref S3TagObjectsPolicy
        - !Ref S3WriteObjectsPolicy
        - !Ref S3DeleteManualReviewObjectsPolicy
      Runtime: python3.6
      Timeout: 10

  ReceiveApprovalDecisionAPI:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/receive_approval_decision_api/
      Handler: receiveApprovalDecisionAPI.lambda_handler
      Policies:
        - !Ref StateMachineSendTaskPolicy
      Runtime: python3.6
      Events:
        ApiEventAllow:
          Type: Api
          Properties:
            Path: /allow
            Method: get
        APIEventDeny:
          Type: Api
          Properties:
            Path: /deny
            Method: get
      Timeout: 10

  TriggerManualApproval:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/trigger_manual_approval/
      Environment:
        Variables:
          apiAllowEndpoint: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/allow"
          apiDenyEndpoint: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/deny"
          snsTopicArn: !Ref SNSApprovalTopic
          sourceS3Bucket: !Ref datapipelinescanstagebucket
          targetS3Bucket: !Ref datapipelinemanualreviewbucket
          targetScannedS3Bucket: !Ref datapipelinescanneddatabucket
      Handler: triggerManualApproval.lambda_handler
      Policies:
        - SNSPublishMessagePolicy:
            TopicName:
              !GetAtt SNSApprovalTopic.TopicName
        - S3ReadPolicy:
            BucketName:
              !Ref datapipelinescanstagebucket
        - !Ref S3DeleteScanStageObjectsPolicy
        - !Ref S3TagObjectsPolicy
        - !Ref S3WriteObjectsPolicy
      Runtime: python3.6
      Timeout: 10

  # Lambda CloudWatch Log Groups
  TriggerMacieScanLog:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${TriggerMacieScan}"
      RetentionInDays: 30

  CheckMacieStatusLog:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${CheckMacieStatus}"
      RetentionInDays: 30

  DeleteManualReviewS3FilesLog:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${DeleteManualReviewS3Files}"
      RetentionInDays: 30

  GetMacieFindingsCountLog:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GetMacieFindingsCount}"
      RetentionInDays: 30

  MoveAllScanStageS3FilesLog:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${MoveAllScanStageS3Files}"
      RetentionInDays: 30

  MoveToScannedDataS3FilesLog:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${MoveToScannedDataS3Files}"
      RetentionInDays: 30

  ReceiveApprovalDecisionAPILog:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ReceiveApprovalDecisionAPI}"
      RetentionInDays: 30

  TriggerManualApprovalLog:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${TriggerManualApproval}"
      RetentionInDays: 30

  #Step Function Defs
  MaciePipelineScanStateMachine:
    Type: AWS::Serverless::StateMachine 
    Properties:
      Name: !Sub ${StepFunctionName}
      DefinitionUri: statemachine/macie_pipeline_scan.asl.json
      DefinitionSubstitutions:
        CheckMacieStatus: !GetAtt CheckMacieStatus.Arn
        DeleteManualReviewS3Files: !GetAtt DeleteManualReviewS3Files.Arn
        GetMacieFindingsCount: !GetAtt GetMacieFindingsCount.Arn
        MoveAllScanStageS3Files: !GetAtt MoveAllScanStageS3Files.Arn
        MoveToScannedDataS3Files: !GetAtt MoveToScannedDataS3Files.Arn
        ReceiveApprovalDecisionAPI: !GetAtt ReceiveApprovalDecisionAPI.Arn
        TriggerMacieScan: !GetAtt TriggerMacieScan.Arn
        TriggerManualApproval: !GetAtt TriggerManualApproval.Arn
      Events:
        CWScheduledEvent:
          Type: Schedule
          Properties:
            Schedule: 'rate(6 hours)'
            Name: AmazonMaciePipelineScan
            Description: >
              Scheduled scan job for Amazon Macie discovery scan for data 
              pipeline
            Enabled: true

      Policies: 
        - LambdaInvokePolicy:
            FunctionName: !Ref CheckMacieStatus
        - LambdaInvokePolicy:
            FunctionName: !Ref DeleteManualReviewS3Files
        - LambdaInvokePolicy:
            FunctionName: !Ref GetMacieFindingsCount
        - LambdaInvokePolicy:
            FunctionName: !Ref MoveAllScanStageS3Files
        - LambdaInvokePolicy:
            FunctionName: !Ref MoveToScannedDataS3Files
        - LambdaInvokePolicy:
            FunctionName: !Ref ReceiveApprovalDecisionAPI
        - LambdaInvokePolicy:
            FunctionName: !Ref TriggerMacieScan
        - LambdaInvokePolicy:
            FunctionName: !Ref TriggerManualApproval
        - CloudWatchPutMetricPolicy: {}
        - AWSXrayWriteOnlyAccess

Outputs:
  MaciePipelineScanStateMachineArn:
    Description: "Macie Scan Step Function ARN"
    Value: !Ref MaciePipelineScanStateMachine
  
  datapipelinerawbucketname:
    Description: "Data pipeline raw bucket name to trigger Macie scan"
    Value: !Ref datapipelinerawbucket

  datapipelinescanneddatabucketname:
    Description: "Data pipeline bucket post Macie scan"
    Value: !Ref datapipelinescanneddatabucket

